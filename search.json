[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "A4.html",
    "href": "A4.html",
    "title": "Assignment 4",
    "section": "",
    "text": "#install.packages(\"quarto\")\n\n# Charts #1–#4  |  Alternative robust version (no tidytext)\n\nsuppressPackageStartupMessages({\n  library(readr); library(dplyr); library(tidyr)\n  library(ggplot2); library(scales); library(lubridate)\n  library(stringr); library(forcats)\n})\noptions(scipen = 999)\n\n# ---------- 0) Load & clean ----------\ncsv_path &lt;- \"/Users/jingtao/Desktop/FALL 2025/DATA VISUALIZATION/Jing Tao/owid-covid-data.csv\"   \nowid &lt;- read_csv(csv_path, show_col_types = FALSE)\n \nneed &lt;- c(\"continent\",\"location\",\"date\",\"population\",\"total_cases\",\"gdp_per_capita\")\nstopifnot(all(need %in% names(owid)))\n\nlatest &lt;- owid %&gt;%\n  select(all_of(need)) %&gt;%\n  filter(!is.na(continent), !is.na(population), population &gt; 0) %&gt;%\n  mutate(date_clean = ymd(str_sub(as.character(date), 1, 10), quiet = TRUE)) %&gt;%\n  filter(!is.na(date_clean)) %&gt;%\n  group_by(location) %&gt;%\n  slice_max(order_by = date_clean, n = 1, with_ties = FALSE) %&gt;%\n  ungroup()\n\ndf &lt;- latest %&gt;%\n  transmute(\n    Continent  = continent,\n    Country    = location,\n    Population = as.numeric(population) / 1e6,   # 百万人\n    Cases      = as.numeric(total_cases),\n    GDP        = as.numeric(gdp_per_capita)\n  )\n\nif (!dir.exists(\"outputs\")) dir.create(\"outputs\", recursive = TRUE)\nstamp &lt;- format(Sys.time(), \"%Y%m%d_%H%M%S\")\nsave_png &lt;- function(p, name, w=12, h=7, dpi=300){\n  fn &lt;- file.path(\"outputs\", paste0(name, \"_\", stamp, \".png\"))\n  ggsave(fn, p, width=w, height=h, dpi=dpi); message(\"Saved: \", fn)\n}\n\n# Chart 1 — Variable Width Column\nwrap_cont &lt;- function(x) gsub(\" \", \"\\n\", x)\n\nmekko &lt;- df %&gt;%\n  group_by(Continent) %&gt;%\n  summarise(\n    pop_sum = sum(Population, na.rm = TRUE),\n    cases_median = median(Cases, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  arrange(Continent) %&gt;%\n  mutate(\n    width_share = pop_sum / sum(pop_sum),\n    xmin = lag(cumsum(width_share), default = 0),\n    xmax = cumsum(width_share),\n    xmid = (xmin + xmax) / 2,\n    Cont_lbl = wrap_cont(Continent)\n  )\n\np1 &lt;- ggplot(mekko) +\n  geom_rect(aes(xmin=xmin, xmax=xmax, ymin=0, ymax=cases_median, fill=Continent),\n            color=\"white\") +\n  scale_x_continuous(breaks=mekko$xmid, labels=mekko$Cont_lbl, expand=c(0.02,0)) +\n  scale_y_continuous(labels=label_comma()) +\n  labs(\n    title=\"Chart 1 — Variable Width Column Chart\",\n    subtitle=\"Width = population share (millions); Height = median total cases (latest per country)\",\n    x=\"Continent (bar width ∝ population share)\", y=\"Median Total Cases\"\n  ) +\n  theme_minimal(base_size=13) +\n  theme(legend.position=\"none\", plot.title=element_text(face=\"bold\"))\nprint(p1)\n\n\n\n\n\n\n\nsave_png(p1, \"A4_chart1_mekko\")\n\nSaved: outputs/A4_chart1_mekko_20251029_211618.png\n\n\n\n# Chart 2 — Table with Embedded Charts\n\ntop6_tbl &lt;- df %&gt;%\n  slice_max(order_by = Cases, n = 6, with_ties = FALSE) %&gt;%\n  select(Country, Population, GDP)\n\nlong2 &lt;- top6_tbl %&gt;%\n  pivot_longer(c(Population, GDP), names_to = \"Metric\", values_to = \"Value\") %&gt;%\n  group_by(Metric) %&gt;%\n  mutate(Value_scaled = Value / max(Value, na.rm = TRUE)) %&gt;%\n  ungroup()\n\np2 &lt;- ggplot(long2, aes(x = 1, y = Value_scaled)) +\n  geom_col(width = 0.6, fill = \"#6baed6\") +\n  facet_grid(rows = vars(Country), cols = vars(Metric), switch = \"y\") +\n  coord_cartesian(ylim = c(0,1)) +\n  labs(\n    title=\"Chart 2 — Table with Embedded Charts (ggplot-only)\",\n    subtitle=\"Rows = Top-6 by Cases; Columns = Population (M) & GDP per capita (scaled within column)\",\n    x=NULL, y=NULL\n  ) +\n  theme_minimal(base_size=13) +\n  theme(\n    axis.text=element_blank(), axis.ticks=element_blank(), panel.grid=element_blank(),\n    strip.placement=\"outside\",\n    strip.background=element_rect(fill=\"grey95\", color=NA),\n    panel.border=element_rect(color=\"grey70\", fill=NA, linewidth=0.5),\n    plot.title=element_text(face=\"bold\"),\n    plot.margin=margin(10,10,10,16)\n  )\nprint(p2)\n\n\n\n\n\n\n\nsave_png(p2, \"A4_chart2_table_embedded\")\n\nSaved: outputs/A4_chart2_table_embedded_20251029_211618.png\n\n\n\n# Chart 3 — Horizontal Bar (Many items, Few categories)\n\ndf3 &lt;- df %&gt;%\n  group_by(Continent) %&gt;%\n  slice_max(order_by = Cases, n = 8, with_ties = FALSE) %&gt;%\n  ungroup() %&gt;%\n  mutate(\n    y_comb = paste(Continent, Country, sep = \" | \")\n  ) %&gt;%\n  group_by(Continent) %&gt;%\n  arrange(Cases, .by_group = TRUE) %&gt;%\n  mutate(\n    # 在各洲内部设置因子顺序（从小到大，条形从下到上）\n    y_comb = factor(y_comb, levels = unique(y_comb))\n  ) %&gt;%\n  ungroup()\n\n# 只显示国家名的 labeller\nonly_country &lt;- function(x) sub(\"^.*\\\\|\\\\s*\", \"\", x)\n\np3 &lt;- ggplot(df3, aes(x = Cases, y = y_comb)) +\n  geom_col(fill = \"#74c476\") +\n  facet_wrap(~ Continent, nrow = 1, scales = \"free_y\") +\n  scale_y_discrete(labels = only_country) +\n  scale_x_continuous(labels = label_comma()) +\n  labs(\n    title = \"Chart 3 — Horizontal Bar Chart (Many Items, Few Categories)\",\n    subtitle = \"Top 8 countries by total cases within each continent (latest per country)\",\n    x = \"Total Cases\", y = \"Country\"\n  ) +\n  theme_minimal(base_size = 13) +\n  theme(plot.title = element_text(face = \"bold\"))\nprint(p3)\n\n\n\n\n\n\n\nsave_png(p3, \"A4_chart3_bar_faceted\")\n\nSaved: outputs/A4_chart3_bar_faceted_20251029_211618.png\n\n\n\n# --------------------------------------------------------------\n# Chart 4 — Column Chart (Few items)\n# --------------------------------------------------------------\nagg4 &lt;- df %&gt;%\n  group_by(Continent) %&gt;%\n  summarise(median_gdp_pc = median(GDP, na.rm = TRUE), .groups = \"drop\")\n\np4 &lt;- ggplot(agg4, aes(x = Continent, y = median_gdp_pc, fill = Continent)) +\n  geom_col() +\n  scale_y_continuous(labels = label_comma()) +\n  labs(\n    title=\"Chart 4 — Column Chart\",\n    subtitle=\"Median GDP per capita by continent\",\n    x=\"Continent\", y=\"Median GDP per capita (USD)\"\n  ) +\n  theme_minimal(base_size=13) +\n  theme(legend.position=\"none\", plot.title=element_text(face=\"bold\"))\nprint(p4)\n\n\n\n\n\n\n\nsave_png(p4, \"A4_chart4_column\")\n\nSaved: outputs/A4_chart4_column_20251029_211618.png\n\ndir.create(\"images\", showWarnings = FALSE)\nsave_png &lt;- function(p, name, width = 1600, height = 1000, dpi = 150) {\n  ggplot2::ggsave(filename = file.path(\"images\", paste0(name, \".png\")),\n                  plot = p, width = width/96, height = height/96, dpi = dpi)\n}"
  },
  {
    "objectID": "assignment1.html",
    "href": "assignment1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "Sep. 24, 2025\n\nRevisit Anscombe’s examples (anscombe01.R on Teams)\n\n\n\nRead: Anscombe, Francis J. 1973.”Graphs in statistical analysis.” The American\n\nStatistician 27, no. 1: 17-21.\n\nWrite one paragraph to analyze and suggest solutions.\n\n\nAnscombe’s quartet demonstrates that four datasets can yield nearly identical descriptive statistics and regression results, yet display very different patterns when visualized. In the first case, the relationship appears approximately linear, making an ordinary least squares model appropriate. In the second case, the data follow a clear curve, suggesting the need for polynomial terms or nonparametric approaches such as splines. In the third case, the regression line is driven largely by a single influential observation, indicating the importance of conducting diagnostic checks for leverage and influence (e.g., Cook’s distance) and potentially applying robust estimation techniques. In the fourth case, the overall fit is distorted by a single extreme outlier on the x-axis, underscoring the necessity of influence diagnostics, robust regression, or justified exclusion of the outlier. The broader implication is that researchers should always supplement numerical summaries with graphical analysis, evaluate model assumptions carefully, and adapt modeling strategies to the actual data structure rather than relying solely on conventional statistical outputs.\n\nRun Fall.R (on Teams)\n\n\n\nGive your own colors (e.g. Winter).\n\n\n\nExport the file and post on your GitHub website.\n\n\n\nWrite a critique on a chart in published work (book/article/news website)\n\n(Hint: Learn from Nathan Yau’s example discussed in class). Post on your website.\n\nA graph of a diagram\n\nThe box plot in Figure 3 of bodistianu, Gaozhao, and Zhang (2025) clearly shows the distribution of individual accuracy rates among the four treatment groups. However, as Nathan Yau emphasized, the validity of the chart depends not only on correctness, but also on clarity and accessibility.\nFirstly, the design choice of excluding external values (” outliers “) reduces transparency. Outliers can provide important insights into whether some extreme behaviors occur in treatment, which is crucial in behavioral research. By omitting them, the chart hides potential variations and presents a clearer but less informative image.\nSecond, the axis markings are somewhat blurry. The Y-axis shows the “accuracy distribution”, but the box plot has already encoded the distribution through quartiles. A clearer label, such as “Personal Accuracy Rate (0-1)”, will reduce ambiguity. Similarly, adding a sample size under each box can help readers assess whether the differences in dissemination are caused by unequal group sizes.\nThirdly, the descriptions in the title and the main text explain the results of statistical tests (for example, Mann-Whitney test comparisons), but the numbers do not directly indicate significance. Readers must rely on the text rather than the visuals themselves. Marking P-values or significant difference markers on the chart can more effectively integrate evidence into the chart.\nFinally, the choice of color (a uniform gray-blue box) does not guide attention. Using consistent but slightly different colors (for example, the gradient between fact-checked treatments and non-fact-checked treatments) will enhance the experimental design and help the audience quickly see the key contrasts between the conditions.\nIn conclusion, although the chart is statistically correct, its communication can be improved by showing outliers, clarifying labels, marking significant differences, and strategically using colors. These improvements will better conform to the principle of making a hill into a hill, that is, data graphs should not only display numbers but also tell the story carried by the data."
  },
  {
    "objectID": "A3.html#a.-choose-one-of-the-six-charts-and-explain-how-it-is-configured-by-adding-documentation-to-the-codes.",
    "href": "A3.html#a.-choose-one-of-the-six-charts-and-explain-how-it-is-configured-by-adding-documentation-to-the-codes.",
    "title": "Assignment 3",
    "section": "a. Choose one of the six charts and explain how it is configured by adding documentation to the codes.",
    "text": "a. Choose one of the six charts and explain how it is configured by adding documentation to the codes.\n\nx  &lt;- c(0.5, 2, 4, 8, 12, 16)\ny1 &lt;- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)\ny2 &lt;- c(4, .8, .5, .45, .4, .3)\n# Two y-values (y1 and y2) are measured at the same x positions.\n\n\npar(las=1, mar=c(4, 4, 2, 4), cex=.7)\n# las=1: makes axis labels horizontal.\n# mar=c(4,4,2,4): sets plot margins (bottom, left, top, right).\n# cex=.7: shrinks text/points to 70% of default.\n\nplot.new()\nplot.window(range(x), c(0, 6))\n# plot.new() starts a blank plotting canvas.\n# plot.window() defines x and y ranges (here, x from 0.5 to 16, y from 0 to 6).\n# This gives full control over axes and layers.\n\n\nlines(x, y1)\nlines(x, y2)\n#Adds connected lines for y1 and y2.\n\npoints(x, y1, pch=16, cex=2)                 # Try different cex?\npoints(x, y2, pch=21, bg=\"white\", cex=2)     # Different background color\n# y1 points: solid black circles (pch=16).\n# y2 points: open circles with white fill (pch=21, bg=\"white\").\n# cex=2 makes them larger than default.\n\npar(col=\"gray50\", fg=\"gray50\", col.axis=\"gray50\")\naxis(1, at=seq(0, 16, 4))                    # 1=bottom, 2=left, 3=top, 4=right\naxis(2, at=seq(0, 6, 2))\naxis(4, at=seq(0, 6, 2))\n# All plot lines/axes drawn in gray.\n# Adds bottom (1), left (2), and right (4) axes with custom tick marks.\n\nbox(bty=\"u\")\nmtext(\"Travel Time (s)\",          side=1, line=2, cex=0.8)\nmtext(\"Responses per Travel\",     side=2, line=2, las=0, cex=0.8)\nmtext(\"Responses per Second\",     side=4, line=2, las=0, cex=0.8)\n# box(bty=\"u\"): draws a U-shaped frame (bottom + left + right, no top border).\n# mtext(): adds axis labels outside the plot margins.\n\ntext(4, 5, \"Bird 131\")\n# Places the text label “Bird 131” at coordinates (x=4, y=5).\n\npar(mar=c(5.1, 4.1, 4.1, 2.1), col=\"black\", fg=\"black\", col.axis=\"black\")\n# Resets margins and colors so later plots aren’t affected."
  },
  {
    "objectID": "A3.html#rerun-anscombe01.r-in-teams-folder",
    "href": "A3.html#rerun-anscombe01.r-in-teams-folder",
    "title": "Assignment 3",
    "section": "2. Rerun anscombe01.R (in Teams folder)",
    "text": "2. Rerun anscombe01.R (in Teams folder)\n\nData Visualization\n\n\nObjective: Identify data or model problems using visualization\n\n\nAnscombe (1973) Quartlet\n\ndata(anscombe)  # Load Anscombe's data\nsummary(anscombe)\n\n       x1             x2             x3             x4           y1        \n Min.   : 4.0   Min.   : 4.0   Min.   : 4.0   Min.   : 8   Min.   : 4.260  \n 1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 8   1st Qu.: 6.315  \n Median : 9.0   Median : 9.0   Median : 9.0   Median : 8   Median : 7.580  \n Mean   : 9.0   Mean   : 9.0   Mean   : 9.0   Mean   : 9   Mean   : 7.501  \n 3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.: 8   3rd Qu.: 8.570  \n Max.   :14.0   Max.   :14.0   Max.   :14.0   Max.   :19   Max.   :10.840  \n       y2              y3              y4        \n Min.   :3.100   Min.   : 5.39   Min.   : 5.250  \n 1st Qu.:6.695   1st Qu.: 6.25   1st Qu.: 6.170  \n Median :8.140   Median : 7.11   Median : 7.040  \n Mean   :7.501   Mean   : 7.50   Mean   : 7.501  \n 3rd Qu.:8.950   3rd Qu.: 7.98   3rd Qu.: 8.190  \n Max.   :9.260   Max.   :12.74   Max.   :12.500  \n\n## Simple version\nplot(anscombe$x1,anscombe$y1)\nsummary(anscombe)\n\n       x1             x2             x3             x4           y1        \n Min.   : 4.0   Min.   : 4.0   Min.   : 4.0   Min.   : 8   Min.   : 4.260  \n 1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 8   1st Qu.: 6.315  \n Median : 9.0   Median : 9.0   Median : 9.0   Median : 8   Median : 7.580  \n Mean   : 9.0   Mean   : 9.0   Mean   : 9.0   Mean   : 9   Mean   : 7.501  \n 3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.: 8   3rd Qu.: 8.570  \n Max.   :14.0   Max.   :14.0   Max.   :14.0   Max.   :19   Max.   :10.840  \n       y2              y3              y4        \n Min.   :3.100   Min.   : 5.39   Min.   : 5.250  \n 1st Qu.:6.695   1st Qu.: 6.25   1st Qu.: 6.170  \n Median :8.140   Median : 7.11   Median : 7.040  \n Mean   :7.501   Mean   : 7.50   Mean   : 7.501  \n 3rd Qu.:8.950   3rd Qu.: 7.98   3rd Qu.: 8.190  \n Max.   :9.260   Max.   :12.74   Max.   :12.500  \n\n# Create four model objects\nlm1 &lt;- lm(y1 ~ x1, data=anscombe)\nsummary(lm1)\n\n\nCall:\nlm(formula = y1 ~ x1, data = anscombe)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.92127 -0.45577 -0.04136  0.70941  1.83882 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)   \n(Intercept)   3.0001     1.1247   2.667  0.02573 * \nx1            0.5001     0.1179   4.241  0.00217 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.237 on 9 degrees of freedom\nMultiple R-squared:  0.6665,    Adjusted R-squared:  0.6295 \nF-statistic: 17.99 on 1 and 9 DF,  p-value: 0.00217\n\nlm2 &lt;- lm(y2 ~ x2, data=anscombe)\nsummary(lm2)\n\n\nCall:\nlm(formula = y2 ~ x2, data = anscombe)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.9009 -0.7609  0.1291  0.9491  1.2691 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)   \n(Intercept)    3.001      1.125   2.667  0.02576 * \nx2             0.500      0.118   4.239  0.00218 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.237 on 9 degrees of freedom\nMultiple R-squared:  0.6662,    Adjusted R-squared:  0.6292 \nF-statistic: 17.97 on 1 and 9 DF,  p-value: 0.002179\n\nlm3 &lt;- lm(y3 ~ x3, data=anscombe)\nsummary(lm3)\n\n\nCall:\nlm(formula = y3 ~ x3, data = anscombe)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.1586 -0.6146 -0.2303  0.1540  3.2411 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)   \n(Intercept)   3.0025     1.1245   2.670  0.02562 * \nx3            0.4997     0.1179   4.239  0.00218 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.236 on 9 degrees of freedom\nMultiple R-squared:  0.6663,    Adjusted R-squared:  0.6292 \nF-statistic: 17.97 on 1 and 9 DF,  p-value: 0.002176\n\nlm4 &lt;- lm(y4 ~ x4, data=anscombe)\nsummary(lm4)\n\n\nCall:\nlm(formula = y4 ~ x4, data = anscombe)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-1.751 -0.831  0.000  0.809  1.839 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)   \n(Intercept)   3.0017     1.1239   2.671  0.02559 * \nx4            0.4999     0.1178   4.243  0.00216 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.236 on 9 degrees of freedom\nMultiple R-squared:  0.6667,    Adjusted R-squared:  0.6297 \nF-statistic:    18 on 1 and 9 DF,  p-value: 0.002165\n\nplot(anscombe$x1,anscombe$y1)\nabline(coefficients(lm1))\n\n\n\n\n\n\n\nplot(anscombe$x2,anscombe$y2)\nabline(coefficients(lm2))\n\n\n\n\n\n\n\nplot(anscombe$x3,anscombe$y3)\nabline(coefficients(lm3))\n\n\n\n\n\n\n\nplot(anscombe$x4,anscombe$y4)\nabline(coefficients(lm4))\n\n\n\n\n\n\n\n## Fancy version (per help file)\n\nff &lt;- y ~ x\nmods &lt;- setNames(as.list(1:4), paste0(\"lm\", 1:4))\n\n# Plot using for loop\nfor(i in 1:4) {\n  ff[2:3] &lt;- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  ## or   ff[[2]] &lt;- as.name(paste0(\"y\", i))\n  ##      ff[[3]] &lt;- as.name(paste0(\"x\", i))\n  mods[[i]] &lt;- lmi &lt;- lm(ff, data = anscombe)\n  print(anova(lmi))\n}\n\nAnalysis of Variance Table\n\nResponse: y1\n          Df Sum Sq Mean Sq F value  Pr(&gt;F)   \nx1         1 27.510 27.5100   17.99 0.00217 **\nResiduals  9 13.763  1.5292                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nAnalysis of Variance Table\n\nResponse: y2\n          Df Sum Sq Mean Sq F value   Pr(&gt;F)   \nx2         1 27.500 27.5000  17.966 0.002179 **\nResiduals  9 13.776  1.5307                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nAnalysis of Variance Table\n\nResponse: y3\n          Df Sum Sq Mean Sq F value   Pr(&gt;F)   \nx3         1 27.470 27.4700  17.972 0.002176 **\nResiduals  9 13.756  1.5285                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nAnalysis of Variance Table\n\nResponse: y4\n          Df Sum Sq Mean Sq F value   Pr(&gt;F)   \nx4         1 27.490 27.4900  18.003 0.002165 **\nResiduals  9 13.742  1.5269                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nsapply(mods, coef)  # Note the use of this function\n\n                  lm1      lm2       lm3       lm4\n(Intercept) 3.0000909 3.000909 3.0024545 3.0017273\nx1          0.5000909 0.500000 0.4997273 0.4999091\n\nlapply(mods, function(fm) coef(summary(fm)))\n\n$lm1\n             Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.0000909  1.1247468 2.667348 0.025734051\nx1          0.5000909  0.1179055 4.241455 0.002169629\n\n$lm2\n            Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.000909  1.1253024 2.666758 0.025758941\nx2          0.500000  0.1179637 4.238590 0.002178816\n\n$lm3\n             Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.0024545  1.1244812 2.670080 0.025619109\nx3          0.4997273  0.1178777 4.239372 0.002176305\n\n$lm4\n             Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.0017273  1.1239211 2.670763 0.025590425\nx4          0.4999091  0.1178189 4.243028 0.002164602\n\n# Preparing for the plots\nop &lt;- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))\n\n# Plot charts using for loop\nfor(i in 1:4) {\n  ff[2:3] &lt;- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  plot(ff, data = anscombe, col = \"red\", pch = 21, bg = \"orange\", cex = 1.2,\n       xlim = c(3, 19), ylim = c(3, 13))\n  abline(mods[[i]], col = \"blue\")\n}\nmtext(\"Anscombe's 4 Regression data sets\", outer = TRUE, cex = 1.5)\n\n\n\n\n\n\n\npar(op)\n\n\n\na. Compare the regression models\n\n\nAlthough the four regression models show nearly identical slopes, intercepts, and R² values, the actual data patterns behind them are very different. In the first dataset, the points follow a roughly linear pattern, so a straight-line model makes sense. In the second dataset, the relationship is curved, which breaks the linearity assumption. In the third dataset, one extreme point with high leverage has a strong influence on the line. In the fourth dataset, most points are clustered at the same x-value, and a single outlier determines the slope. This comparison shows that summary statistics alone can be misleading; visualizing the data is essential to detect problems like non-linearity, leverage, or outliers.\n\n\nb. Compare different ways to create the plots (e.g. changing colors, line types, plot characters)\n\nop &lt;- par(mfrow = c(2,2), mar = 0.1 + c(4,4,1,1), oma = c(0,0,2,0))\npch_vec &lt;- c(16, 17, 19, 21)  \ncol_pts &lt;- c(\"black\",\"firebrick\",\"darkgreen\",\"navy\")\nbg_pts  &lt;- c(NA, NA, NA, \"gold\")  \nltys    &lt;- c(1, 2, 3, 4)\nlwds    &lt;- c(2, 2, 2, 2)\n\nfor (i in 1:4) {\n  xi &lt;- anscombe[[paste0(\"x\", i)]]\n  yi &lt;- anscombe[[paste0(\"y\", i)]]\n  mi &lt;- lm(yi ~ xi)\n  plot(xi, yi,\n       pch = pch_vec[i], col = col_pts[i], bg = bg_pts[i],\n       cex = 1.2, xlab = paste0(\"x\", i), ylab = paste0(\"y\", i))\n  abline(mi, col = \"dodgerblue3\", lty = ltys[i], lwd = lwds[i])\n  legend(\"topleft\", inset = 0.02, bty = \"n\",\n         legend = c(\"data\", \"OLS line\"),\n         pch = c(pch_vec[i], NA), pt.bg = c(bg_pts[i], NA),\n         col = c(col_pts[i], \"dodgerblue3\"), lty = c(NA, ltys[i]), lwd = c(NA, lwds[i]))\n}\nmtext(\"Anscombe's 4 datasets — styled\", outer = TRUE, cex = 1.4)\n\n\n\n\n\n\n\npar(op)\n\n\n\n3. Can you finetune the charts without using other packages (consult RGraphics by Murrell)?\n\n\na. Use a serif font\n\nx  &lt;- c(0.5, 2, 4, 8, 12, 16)\ny1 &lt;- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)\ny2 &lt;- c(4, 0.8, 0.5, 0.45, 0.4, 0.3)\n\nop &lt;- par(no.readonly = TRUE)   \npar(family = \"serif\", las = 1, mar = c(4,4,2,4), cex = 0.9)\n\nplot.new()\nplot.window(range(x), c(0, 6))\n\nlines(x, y1, lwd = 2)\nlines(x, y2, lwd = 2, lty = 2)\n\npoints(x, y1, pch = 19, cex = 1.5)\npoints(x, y2, pch = 21, cex = 1.5, bg = \"white\")\n\naxis(1, at = seq(0, 16, 4))\naxis(2, at = seq(0, 6, 2))\naxis(4, at = seq(0, 6, 2))\nbox(bty = \"u\")\n\nmtext(\"Travel Time (s)\",      side = 1, line = 2)\nmtext(\"Responses per Travel\", side = 2, line = 2)\nmtext(\"Responses per Second\", side = 4, line = 2)\n\nlegend(\"topleft\",\n       legend = c(\"y1 (line)\", \"y2 (dashed)\"),\n       lty    = c(1, 2), lwd = 2,\n       pch    = c(19, 21),\n       pt.bg  = c(NA, \"white\"),\n       bty = \"n\")\n\n\n\n\n\n\n\npar(op)  \n\n\n\nb. Try non-default colors\n\ncol1 &lt;- \"#355C7D\"; col2 &lt;- \"#F67280\"; grid_col &lt;- \"#99B898\"\n\nop &lt;- par(no.readonly = TRUE)\npar(family = \"serif\", las = 1, mar = c(4,4,2,4), cex = 0.9,\n    col.axis = \"gray30\", col.lab = \"gray10\", fg = \"gray30\")\n\nplot.new()\nplot.window(range(x), c(0, 6))\n\nabline(h = seq(0, 6, 1), v = seq(0, 16, 2), col = adjustcolor(grid_col, 0.4), lty = 3)\n\nlines(x, y1, lwd = 2.2, col = col1, lty = 1)\nlines(x, y2, lwd = 2.2, col = col2, lty = 2)\n\npoints(x, y1, pch = 19, cex = 1.6, col = col1)\npoints(x, y2, pch = 21, cex = 1.6, col = col2, bg = adjustcolor(col2, 0.3))\n\naxis(1, at = seq(0, 16, 4))\naxis(2, at = seq(0, 6,  2))\naxis(4, at = seq(0, 6,  2))\nbox(bty = \"u\")\n\nmtext(\"Travel Time (s)\",      side = 1, line = 2)\nmtext(\"Responses per Travel\", side = 2, line = 2)\nmtext(\"Responses per Second\", side = 4, line = 2)\n\nlegend(\"topleft\",\n       legend = c(\"y1 (blue)\", \"y2 (pink)\"),\n       lty    = c(1, 2), lwd = 2.2,\n       pch    = c(19, 21),\n       pt.bg  = c(NA, adjustcolor(col2, 0.3)),\n       col    = c(col1, col2),\n       bty = \"n\")\n\n\n\n\n\n\n\npar(op)\n\n\n\nc. Use own plotting character\n\nop &lt;- par(family = \"serif\", mar = c(4, 4, 1, 1), las = 1, cex = 0.95,\n          col.axis = \"gray30\", fg = \"gray25\")\n\nx  &lt;- c(0.5, 2, 4, 8, 12, 16)\ny1 &lt;- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)\ny2 &lt;- c(4, 0.8, 0.5, 0.45, 0.4, 0.3)\n\nplot.new()\nplot.window(xlim = range(x), ylim = c(0, 6))\naxis(1, at = seq(0, 16, 4))\naxis(2, at = 0:6)\nbox(bty = \"l\")\n\npoints(x, y1, pch = 8,  col = \"#2B6CB0\", cex = 1.6, lwd = 1.2)  # blue star\npoints(x, y2, pch = 18, col = \"#E53E3E\", cex = 1.3)             # red diamond\n\nmtext(\"Travel Time (s)\", side = 1, line = 2.2)\nmtext(\"Responses\",       side = 2, line = 2.2)\nlegend(\"topleft\",\n       legend = c(\"y1: star\", \"y2: diamond\"),\n       pch = c(8, 18), col = c(\"#2B6CB0\", \"#E53E3E\"),\n       pt.cex = c(1.6, 1.3), bty = \"n\")\n\n\n\n\n\n\n\npar(op)\n\n\n\n4. How about with ggplot2? (use tidyverse package)\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.2\n✔ ggplot2   4.0.0     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ndat_long &lt;- datasets::anscombe |&gt;\n  as_tibble() |&gt;\n  mutate(row = row_number()) |&gt;\n  pivot_longer(\n    cols = -row,\n    names_to = c(\".value\", \"set\"),\n    names_pattern = \"([xy])(\\\\d)\"\n  ) |&gt;\n  mutate(set = factor(set, levels = c(\"1\",\"2\",\"3\",\"4\")))\n\nggplot(dat_long, aes(x = x, y = y)) +\n  geom_point(shape = 21, size = 2.8, stroke = 0.6,\n             fill = \"#FFA54C\", color = \"#333333\") +\n  geom_smooth(method = \"lm\", se = FALSE, linewidth = 1.1, color = \"#2C7BE5\") +\n  facet_wrap(~ set, ncol = 2) +\n  labs(\n    title = \"Anscombe's ggplot\",\n    x = \"x\", y = \"y\",\n    caption = \"Data: datasets::anscombe\"\n  ) +\n  theme_minimal(base_family = \"serif\") +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 16),\n    plot.subtitle = element_text(size = 11),\n    panel.grid.minor = element_blank()\n  )\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n5. Pre-hackathon by team:\n\n\na. Team work: Replicate the Scatterplot matrix below (hint: Acquire data using the following codes)\n\nlibrary(tidyverse)\n\nowidall &lt;- read.csv(\"https://github.com/owid/covid-19-data/raw/master/public/data/owid-covid-data.csv\")\nowidall &lt;- owidall[!grepl(\"^OWID\", owidall$iso_code), ]\nowideu  &lt;- subset(owidall, continent == \"Europe\")\n\nowideu$date &lt;- as.Date(owideu$date)\n\nggplot(owideu, aes(x = date, y = new_deaths, color = location)) +\n  geom_point(size = 0.7, alpha = 0.7) +\n  labs(x = \"Date\", y = \"COVID Deaths in Europe (Daily)\") +\n  theme_minimal()\n\nWarning: Removed 1607 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(GGally)\n\nowidall &lt;- read.csv(\"https://github.com/owid/covid-19-data/raw/master/public/data/owid-covid-data.csv\")\nowidall &lt;- owidall[!grepl(\"^OWID\", owidall$iso_code), ]\nowideu  &lt;- subset(owidall, continent == \"Europe\")\n\neu_latest &lt;- owideu %&gt;%\n  group_by(location) %&gt;%\n  slice_tail(n = 1) %&gt;%\n  ungroup()\n\nvars &lt;- c(\"total_cases_per_million\",\n          \"total_deaths_per_million\",\n          \"gdp_per_capita\",\n          \"life_expectancy\")\n\neu_plot &lt;- eu_latest %&gt;% select(all_of(vars)) %&gt;% drop_na()\n\neu_plot &lt;- eu_plot %&gt;%\n  mutate(across(c(total_cases_per_million,\n                  total_deaths_per_million,\n                  gdp_per_capita), log1p))\n\ncolnames(eu_plot) &lt;- c(\"Cases(log)\", \"Deaths(log)\", \"GDPpc(log)\", \"LifeExp\")\n\nggpairs(eu_plot,\n        title = \"Scatterplot Matrix (Europe, log)\",\n        lower = list(continuous = wrap(\"points\", alpha = 0.7, size = 1.5)),\n        diag  = list(continuous = wrap(\"densityDiag\", alpha = 0.5)))\n\n\n\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(GGally)\nlibrary(scales)\n\n\nAttaching package: 'scales'\n\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\noptions(scipen = 999)  \n\nowidall &lt;- read.csv(\"https://github.com/owid/covid-19-data/raw/master/public/data/owid-covid-data.csv\")\nowidall &lt;- owidall[!grepl(\"^OWID\", owidall$iso_code), ]\nowideu  &lt;- subset(owidall, continent == \"Europe\")\n\neu_latest &lt;- owideu %&gt;%\n  group_by(location) %&gt;%\n  slice_tail(n = 1) %&gt;%\n  ungroup()\n\nvars &lt;- c(\"total_cases_per_million\",\n          \"total_deaths_per_million\",\n          \"gdp_per_capita\",\n          \"life_expectancy\")\n\neu_plot &lt;- eu_latest %&gt;% select(all_of(vars)) %&gt;% drop_na()\ncolnames(eu_plot) &lt;- c(\"Cases/mil\", \"Deaths/mil\", \"GDPpc\", \"LifeExp\")\n\nmy_points &lt;- function(data, mapping, ...){\n  ggplot(data = data, mapping = mapping) +\n    geom_point(alpha = 0.7, size = 1.5) +\n    scale_x_continuous(labels = label_number(big.mark = \",\"), breaks = pretty_breaks(3)) +\n    scale_y_continuous(labels = label_number(big.mark = \",\"), breaks = pretty_breaks(3))\n}\nmy_hist &lt;- function(data, mapping, ...){\n  ggplot(data = data, mapping = mapping) +\n    geom_histogram(bins = 20, fill = \"grey70\", color = \"white\") +\n    scale_x_continuous(labels = label_number(big.mark = \",\"), breaks = pretty_breaks(3))\n}\n\nggpairs(\n  eu_plot,\n  lower = list(continuous = my_points),\n  diag  = list(continuous = my_hist),\n  upper = list(continuous = wrap(\"cor\", size = 4)),\n  title = \"Scatterplot Matrix (Europe)\"\n)\n\n\n\n\n\n\n\n\n\n\nb. Send the codes to the TA. The first team delivering the code and chart will win a prize (by time stamp and product)\n\nfile.exists(\"A3.html\")\n\n[1] FALSE\n\nlist.files(c(\".\", \"_site\", \"docs\"), pattern = \"A3\\\\.html\", recursive = TRUE)\n\n[1] \"A3.html\"          \"docs/A3.html\"     \"Jing-Tao/A3.html\"\n\n\n\nfile.rename(\"Jing-Tao/A3.html\", \"A3.html\")\n\n[1] TRUE\n\nif (dir.exists(\"Jing-Tao/A3_files\")) {\n  file.rename(\"Jing-Tao/A3_files\", \"A3_files\")\n}\n\nWarning in file.rename(\"Jing-Tao/A3_files\", \"A3_files\"): cannot rename file\n'Jing-Tao/A3_files' to 'A3_files', reason 'Directory not empty'\n\n\n[1] FALSE"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Jing Tao",
    "section": "",
    "text": "This is Jing Tao’s website for EPPS 6356: Data Visualization"
  },
  {
    "objectID": "A2.html",
    "href": "A2.html",
    "title": "Assignment 2",
    "section": "",
    "text": "Run line by line and note the changes\n\nPay attention to the comments and answer the questions if any\n\n\n\n\n\nplot(pressure, pch = 16)\ntext(\n  150, 600,\n  \"Pressure (mm Hg)\\nversus\\nTemperature (Celsius)\"\n)\n\n\n\n\n\n\n\n\n\nx  &lt;- c(0.5, 2, 4, 8, 12, 16)\ny1 &lt;- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)\ny2 &lt;- c(4, 0.8, 0.5, 0.45, 0.4, 0.3)\n\npar(las = 1,\nmar = c(4, 4, 2, 4),\ncex = .7)\n\nplot.new()\nplot.window(range(x), c(0, 6))\n\nlines(x, y1)\nlines(x, y2)\n\npoints(x, y1, pch = 16, cex = 2)                 # Try different cex?\npoints(x, y2, pch = 21, bg = \"white\", cex = 2)   # Different background color\n\npar(col = \"gray50\", fg = \"gray50\", col.axis = \"gray50\")\n\naxis(1, at = seq(0, 16, 4))                      # 1=bottom, 2=left, 3=top, 4=right\naxis(2, at = seq(0, 6, 2))\naxis(4, at = seq(0, 6, 2))\n\nbox(bty = \"u\")\n\nmtext(\"Travel Time (s)\",      side = 1, line = 2, cex = 0.8)\nmtext(\"Responses per Travel\", side = 2, line = 2, las = 0, cex = 0.8)\nmtext(\"Responses per Second\", side = 4, line = 2, las = 0, cex = 0.8)\n\ntext(4, 5, \"Bird 131\")\n\n\n\n\n\n\n\npar(\nmar      = c(5.1, 4.1, 4.1, 2.1),\ncol      = \"black\",\nfg       = \"black\",\ncol.axis = \"black\"\n)\n\n\n# Random data\n\nY &lt;- rnorm(50)\n\n# Make sure no Y exceed [-3.5, 3.5]\n\nY[Y &lt; -3.5 | Y &gt; 3.5] &lt;- NA\n\nx  &lt;- seq(-3.5, 3.5, .1)\ndn &lt;- dnorm(x)\n\npar(mar = c(4.5, 4.1, 3.1, 0))\n\nhist(\nY,\nbreaks = seq(-3.5, 3.5),\nylim   = c(0, 0.5),\ncol    = \"gray80\",\nfreq   = FALSE\n)\n\nlines(x, dnorm(x), lwd = 2)\n\n\n\n\n\n\n\npar(mar = c(5.1, 4.1, 4.1, 2.1))\n\n\npar(mar = c(2, 3.1, 2, 2.1))\n\nmidpts &lt;- barplot(\nVADeaths,\ncol   = gray(0.1 + seq(1, 9, 2) / 11),\nnames = rep(\"\", 4)\n)\n\nmtext(\nsub(\" \", \"\\n\", colnames(VADeaths)),\nat   = midpts,\nside = 1,\nline = 0.5,\ncex  = 0.5\n)\n\ntext(\nrep(midpts, each = 5),\napply(VADeaths, 2, cumsum) - VADeaths / 2,\nVADeaths,\ncol = rep(c(\"white\", \"black\"), times = 3:2),\ncex = 0.8\n)\n\n\n\n\n\n\n\npar(mar = c(5.1, 4.1, 4.1, 2.1))\n\n\npar(mar = c(3, 4.1, 2, 0))\n\nboxplot(\nlen ~ dose,\ndata   = ToothGrowth,\nboxwex = 0.25,\nat     = 1:3 - 0.2,\nsubset = supp == \"VC\",\ncol    = \"white\",\nxlab   = \"\",\nylab   = \"tooth length\",\nylim   = c(0, 35)\n)\n\nmtext(\"Vitamin C dose (mg)\", side = 1, line = 2.5, cex = 0.8)\n\nboxplot(\nlen ~ dose,\ndata   = ToothGrowth,\nadd    = TRUE,\nboxwex = 0.25,\nat     = 1:3 + 0.2,\nsubset = supp == \"OJ\"\n)\n\nlegend(\n1.5, 9,\nc(\"Ascorbic acid\", \"Orange juice\"),\nfill = c(\"white\", \"gray\"),\nbty  = \"n\"\n)\n\n\n\n\n\n\n\npar(mar = c(5.1, 4.1, 4.1, 2.1))\n\n\nx &lt;- seq(-10, 10, length = 30)\ny &lt;- x\n\nf &lt;- function(x, y) {\nr &lt;- sqrt(x^2 + y^2)\n10 * sin(r) / r\n}\n\nz &lt;- outer(x, y, f)\nz[is.na(z)] &lt;- 1\n\npar(mar = c(0, 0.5, 0, 0), lwd = 0.5)\npersp(x, y, z, theta = 30, phi = 30, expand = 0.5)\n\n\n\n\n\n\n\npar(mar = c(5.1, 4.1, 4.1, 2.1), lwd = 1)\n\n\npar(mar = c(0, 2, 1, 2), xpd = FALSE, cex = 0.5)\n\npie.sales &lt;- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12)\nnames(pie.sales) &lt;- c(\n\"Blueberry\", \"Cherry\", \"Apple\",\n\"Boston Cream\", \"Other\", \"Vanilla\"\n)\n\npie(\npie.sales,\ncol = gray(seq(0.3, 1.0, length = 6))\n)\n\n\n\n\n\n\n\n\n\nlibrary(readxl)\n\nhpi_path &lt;- \"/Users/jingtao/Desktop/FALL 2025/DATA VISUALIZATION/Assignment 2/HPI_2024_public_dataset.xlsx\"\n\ndf &lt;- tryCatch(\nread_excel(hpi_path, sheet = \"All Data\",        skip = 1),\nerror = function(e) read_excel(hpi_path, sheet = \"1. All countries\", skip = 8)\n)\n\nWarning: Expecting numeric in A2436 / R2436C1: got 'Coefficients used'\n\n\nWarning: Expecting numeric in A2444 / R2444C1: got 'Year by year data'\n\n\nWarning: Expecting numeric in G2444 / R2444C7: got 'Means'\n\n\nWarning: Expecting numeric in L2444 / R2444C12: got 'Stdevs'\n\n\nWarning: Expecting numeric in Q2444 / R2444C17: got 'CoVs'\n\n\nWarning: Expecting numeric in D2445 / R2445C4: got 'Scale up factor for year'\n\n\nWarning: Expecting numeric in E2445 / R2445C5: got 'Global Pop'\n\n\nWarning: Expecting numeric in G2445 / R2445C7: got 'LifeExp'\n\n\nWarning: Expecting numeric in H2445 / R2445C8: got 'Ladder'\n\n\nWarning: Expecting numeric in I2445 / R2445C9: got 'Carbon'\n\n\nWarning: Expecting numeric in J2445 / R2445C10: got 'Adj Lad x Life Exp'\n\n\nWarning: Expecting numeric in L2445 / R2445C12: got 'LifeExp'\n\n\nWarning: Expecting numeric in M2445 / R2445C13: got 'Ladder'\n\n\nWarning: Expecting numeric in N2445 / R2445C14: got 'Carbon'\n\n\nWarning: Expecting numeric in Q2445 / R2445C17: got 'LifeExp'\n\n\nWarning: Expecting numeric in R2445 / R2445C18: got 'Ladder'\n\n\nWarning: Expecting numeric in U2445 / R2445C21: got 'Carbon'\n\n\nWarning: Expecting logical in V2445 / R2445C22: got 'Adj Lad x Life Exp'\n\n\nWarning: Expecting logical in X2446 / R2446C24: got 'A'\n\n\nWarning: Expecting logical in Y2446 / R2446C25: got 'Year_lookup!A1:A2'\n\n\nWarning: Expecting logical in X2447 / R2447C24: got 'B'\n\n\nWarning: Expecting logical in Y2447 / R2447C25: got 'Year_lookup!B1:B2'\n\n\nWarning: Expecting logical in X2448 / R2448C24: got 'C'\n\n\nWarning: Expecting logical in Y2448 / R2448C25: got 'Year_lookup!C1:C2'\n\n\nWarning: Expecting logical in X2449 / R2449C24: got 'D'\n\n\nWarning: Expecting logical in Y2449 / R2449C25: got 'Year_lookup!D1:D2'\n\n\nWarning: Expecting logical in X2450 / R2450C24: got 'E'\n\n\nWarning: Expecting logical in Y2450 / R2450C25: got 'Year_lookup!E1:E2'\n\n\nWarning: Expecting logical in Y2451 / R2451C25: got 'Year_lookup!F1:F2'\n\n\nWarning: Expecting logical in X2452 / R2452C24: got 'G'\n\n\nWarning: Expecting logical in Y2452 / R2452C25: got 'Year_lookup!G1:G2'\n\n\nWarning: Expecting logical in X2453 / R2453C24: got 'H'\n\n\nWarning: Expecting logical in Y2453 / R2453C25: got 'Year_lookup!H1:H2'\n\n\nWarning: Expecting logical in X2454 / R2454C24: got 'I'\n\n\nWarning: Expecting logical in Y2454 / R2454C25: got 'Year_lookup!I1:I2'\n\n\nWarning: Expecting logical in X2455 / R2455C24: got 'J'\n\n\nWarning: Expecting logical in Y2455 / R2455C25: got 'Year_lookup!J1:J2'\n\n\nWarning: Expecting logical in X2456 / R2456C24: got 'K'\n\n\nWarning: Expecting logical in Y2456 / R2456C25: got 'Year_lookup!K1:K2'\n\n\nWarning: Expecting logical in X2457 / R2457C24: got 'L'\n\n\nWarning: Expecting logical in Y2457 / R2457C25: got 'Year_lookup!L1:L2'\n\n\nWarning: Expecting logical in X2458 / R2458C24: got 'M'\n\n\nWarning: Expecting logical in Y2458 / R2458C25: got 'Year_lookup!M1:M2'\n\n\nWarning: Expecting logical in X2459 / R2459C24: got 'N'\n\n\nWarning: Expecting logical in Y2459 / R2459C25: got 'Year_lookup!N1:N2'\n\n\nWarning: Expecting logical in X2460 / R2460C24: got 'O'\n\n\nWarning: Expecting logical in Y2460 / R2460C25: got 'Year_lookup!O1:O2'\n\n\nWarning: Expecting logical in X2461 / R2461C24: got 'P'\n\n\nWarning: Expecting logical in Y2461 / R2461C25: got 'Year_lookup!P1:P2'\n\n\nWarning: Expecting numeric in A2466 / R2466C1: got 'Average of all years'\n\n\nWarning: Expecting numeric in E2468 / R2468C5: got 'Correlation with HPI'\n\n\nWarning: Expecting numeric in P2468 / R2468C16: got 'Extra HPLY (above min)'\n\n\nWarning: Expecting numeric in E2469 / R2469C5: got 'Correlation with HPI\n(2015)'\n\n\nNew names:\n• `` -&gt; `...15`\n• `` -&gt; `...22`\n• `` -&gt; `...23`\n• `` -&gt; `...24`\n• `` -&gt; `...25`\n\n# figure out column names for 2 possible sheet layouts\n\nif (\"LifeExp\" %in% names(df)) {\nlife_col    &lt;- \"LifeExp\"                  # All Data\nhpi_col     &lt;- \"HPI\"\ncountry_col &lt;- \"Country\"\nregion_col  &lt;- \"Continent\"\n} else {\nlife_col    &lt;- \"Life Expectancy (years)\"  # 1. All countries\nhpi_col     &lt;- \"HPI\"\ncountry_col &lt;- \"Country\"\nregion_col  &lt;- \"Continent\"\n}\n\nok    &lt;- complete.cases(df[[life_col]], df[[hpi_col]])\nx_le  &lt;- as.numeric(df[[life_col]][ok])   # life expectancy\ny_hpi &lt;- as.numeric(df[[hpi_col]][ok])    # HPI score\ncty   &lt;- df[[country_col]][ok]\nreg   &lt;- df[[region_col]][ok]\n\nlength(x_le); length(y_hpi)\n\n[1] 2135\n\n\n[1] 2135\n\nhead(\ndata.frame(\ncountry = cty,\nlifeexp = x_le,\nhpi     = y_hpi\n),\n6\n)\n\n      country lifeexp      hpi\n1     Vanuatu  70.449 57.86116\n2      Sweden  82.983 55.93532\n3 El Salvador  70.748 54.67388\n4  Costa Rica  77.023 54.13215\n5   Nicaragua  73.837 53.56492\n6     Denmark  81.375 53.04326\n\n\n\npar(las = 1, mar = c(4, 4, 1.5, 1))\nplot(\nx_le, y_hpi,\npch  = 16,\nxlab = \"Life expectancy (years)\",\nylab = \"HPI score\"\n)\n\n\n\n\n\n\n\n\n\nplot(\nx_le, y_hpi,\npch  = 16,\nxlab = \"Life expectancy\",\nylab = \"HPI score\"\n)\n\no &lt;- order(x_le)\nlines(x_le[o], y_hpi[o], col = \"gray80\")"
  },
  {
    "objectID": "A2.html#start-plotting-from-basics-pressure-text",
    "href": "A2.html#start-plotting-from-basics-pressure-text",
    "title": "Assignment 2",
    "section": "",
    "text": "plot(pressure, pch = 16)\ntext(\n  150, 600,\n  \"Pressure (mm Hg)\\nversus\\nTemperature (Celsius)\"\n)\n\n\n\n\n\n\n\n\n\nx  &lt;- c(0.5, 2, 4, 8, 12, 16)\ny1 &lt;- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)\ny2 &lt;- c(4, 0.8, 0.5, 0.45, 0.4, 0.3)\n\npar(las = 1,\nmar = c(4, 4, 2, 4),\ncex = .7)\n\nplot.new()\nplot.window(range(x), c(0, 6))\n\nlines(x, y1)\nlines(x, y2)\n\npoints(x, y1, pch = 16, cex = 2)                 # Try different cex?\npoints(x, y2, pch = 21, bg = \"white\", cex = 2)   # Different background color\n\npar(col = \"gray50\", fg = \"gray50\", col.axis = \"gray50\")\n\naxis(1, at = seq(0, 16, 4))                      # 1=bottom, 2=left, 3=top, 4=right\naxis(2, at = seq(0, 6, 2))\naxis(4, at = seq(0, 6, 2))\n\nbox(bty = \"u\")\n\nmtext(\"Travel Time (s)\",      side = 1, line = 2, cex = 0.8)\nmtext(\"Responses per Travel\", side = 2, line = 2, las = 0, cex = 0.8)\nmtext(\"Responses per Second\", side = 4, line = 2, las = 0, cex = 0.8)\n\ntext(4, 5, \"Bird 131\")\n\n\n\n\n\n\n\npar(\nmar      = c(5.1, 4.1, 4.1, 2.1),\ncol      = \"black\",\nfg       = \"black\",\ncol.axis = \"black\"\n)\n\n\n# Random data\n\nY &lt;- rnorm(50)\n\n# Make sure no Y exceed [-3.5, 3.5]\n\nY[Y &lt; -3.5 | Y &gt; 3.5] &lt;- NA\n\nx  &lt;- seq(-3.5, 3.5, .1)\ndn &lt;- dnorm(x)\n\npar(mar = c(4.5, 4.1, 3.1, 0))\n\nhist(\nY,\nbreaks = seq(-3.5, 3.5),\nylim   = c(0, 0.5),\ncol    = \"gray80\",\nfreq   = FALSE\n)\n\nlines(x, dnorm(x), lwd = 2)\n\n\n\n\n\n\n\npar(mar = c(5.1, 4.1, 4.1, 2.1))\n\n\npar(mar = c(2, 3.1, 2, 2.1))\n\nmidpts &lt;- barplot(\nVADeaths,\ncol   = gray(0.1 + seq(1, 9, 2) / 11),\nnames = rep(\"\", 4)\n)\n\nmtext(\nsub(\" \", \"\\n\", colnames(VADeaths)),\nat   = midpts,\nside = 1,\nline = 0.5,\ncex  = 0.5\n)\n\ntext(\nrep(midpts, each = 5),\napply(VADeaths, 2, cumsum) - VADeaths / 2,\nVADeaths,\ncol = rep(c(\"white\", \"black\"), times = 3:2),\ncex = 0.8\n)\n\n\n\n\n\n\n\npar(mar = c(5.1, 4.1, 4.1, 2.1))\n\n\npar(mar = c(3, 4.1, 2, 0))\n\nboxplot(\nlen ~ dose,\ndata   = ToothGrowth,\nboxwex = 0.25,\nat     = 1:3 - 0.2,\nsubset = supp == \"VC\",\ncol    = \"white\",\nxlab   = \"\",\nylab   = \"tooth length\",\nylim   = c(0, 35)\n)\n\nmtext(\"Vitamin C dose (mg)\", side = 1, line = 2.5, cex = 0.8)\n\nboxplot(\nlen ~ dose,\ndata   = ToothGrowth,\nadd    = TRUE,\nboxwex = 0.25,\nat     = 1:3 + 0.2,\nsubset = supp == \"OJ\"\n)\n\nlegend(\n1.5, 9,\nc(\"Ascorbic acid\", \"Orange juice\"),\nfill = c(\"white\", \"gray\"),\nbty  = \"n\"\n)\n\n\n\n\n\n\n\npar(mar = c(5.1, 4.1, 4.1, 2.1))\n\n\nx &lt;- seq(-10, 10, length = 30)\ny &lt;- x\n\nf &lt;- function(x, y) {\nr &lt;- sqrt(x^2 + y^2)\n10 * sin(r) / r\n}\n\nz &lt;- outer(x, y, f)\nz[is.na(z)] &lt;- 1\n\npar(mar = c(0, 0.5, 0, 0), lwd = 0.5)\npersp(x, y, z, theta = 30, phi = 30, expand = 0.5)\n\n\n\n\n\n\n\npar(mar = c(5.1, 4.1, 4.1, 2.1), lwd = 1)\n\n\npar(mar = c(0, 2, 1, 2), xpd = FALSE, cex = 0.5)\n\npie.sales &lt;- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12)\nnames(pie.sales) &lt;- c(\n\"Blueberry\", \"Cherry\", \"Apple\",\n\"Boston Cream\", \"Other\", \"Vanilla\"\n)\n\npie(\npie.sales,\ncol = gray(seq(0.3, 1.0, length = 6))\n)\n\n\n\n\n\n\n\n\n\nlibrary(readxl)\n\nhpi_path &lt;- \"/Users/jingtao/Desktop/FALL 2025/DATA VISUALIZATION/Assignment 2/HPI_2024_public_dataset.xlsx\"\n\ndf &lt;- tryCatch(\nread_excel(hpi_path, sheet = \"All Data\",        skip = 1),\nerror = function(e) read_excel(hpi_path, sheet = \"1. All countries\", skip = 8)\n)\n\nWarning: Expecting numeric in A2436 / R2436C1: got 'Coefficients used'\n\n\nWarning: Expecting numeric in A2444 / R2444C1: got 'Year by year data'\n\n\nWarning: Expecting numeric in G2444 / R2444C7: got 'Means'\n\n\nWarning: Expecting numeric in L2444 / R2444C12: got 'Stdevs'\n\n\nWarning: Expecting numeric in Q2444 / R2444C17: got 'CoVs'\n\n\nWarning: Expecting numeric in D2445 / R2445C4: got 'Scale up factor for year'\n\n\nWarning: Expecting numeric in E2445 / R2445C5: got 'Global Pop'\n\n\nWarning: Expecting numeric in G2445 / R2445C7: got 'LifeExp'\n\n\nWarning: Expecting numeric in H2445 / R2445C8: got 'Ladder'\n\n\nWarning: Expecting numeric in I2445 / R2445C9: got 'Carbon'\n\n\nWarning: Expecting numeric in J2445 / R2445C10: got 'Adj Lad x Life Exp'\n\n\nWarning: Expecting numeric in L2445 / R2445C12: got 'LifeExp'\n\n\nWarning: Expecting numeric in M2445 / R2445C13: got 'Ladder'\n\n\nWarning: Expecting numeric in N2445 / R2445C14: got 'Carbon'\n\n\nWarning: Expecting numeric in Q2445 / R2445C17: got 'LifeExp'\n\n\nWarning: Expecting numeric in R2445 / R2445C18: got 'Ladder'\n\n\nWarning: Expecting numeric in U2445 / R2445C21: got 'Carbon'\n\n\nWarning: Expecting logical in V2445 / R2445C22: got 'Adj Lad x Life Exp'\n\n\nWarning: Expecting logical in X2446 / R2446C24: got 'A'\n\n\nWarning: Expecting logical in Y2446 / R2446C25: got 'Year_lookup!A1:A2'\n\n\nWarning: Expecting logical in X2447 / R2447C24: got 'B'\n\n\nWarning: Expecting logical in Y2447 / R2447C25: got 'Year_lookup!B1:B2'\n\n\nWarning: Expecting logical in X2448 / R2448C24: got 'C'\n\n\nWarning: Expecting logical in Y2448 / R2448C25: got 'Year_lookup!C1:C2'\n\n\nWarning: Expecting logical in X2449 / R2449C24: got 'D'\n\n\nWarning: Expecting logical in Y2449 / R2449C25: got 'Year_lookup!D1:D2'\n\n\nWarning: Expecting logical in X2450 / R2450C24: got 'E'\n\n\nWarning: Expecting logical in Y2450 / R2450C25: got 'Year_lookup!E1:E2'\n\n\nWarning: Expecting logical in Y2451 / R2451C25: got 'Year_lookup!F1:F2'\n\n\nWarning: Expecting logical in X2452 / R2452C24: got 'G'\n\n\nWarning: Expecting logical in Y2452 / R2452C25: got 'Year_lookup!G1:G2'\n\n\nWarning: Expecting logical in X2453 / R2453C24: got 'H'\n\n\nWarning: Expecting logical in Y2453 / R2453C25: got 'Year_lookup!H1:H2'\n\n\nWarning: Expecting logical in X2454 / R2454C24: got 'I'\n\n\nWarning: Expecting logical in Y2454 / R2454C25: got 'Year_lookup!I1:I2'\n\n\nWarning: Expecting logical in X2455 / R2455C24: got 'J'\n\n\nWarning: Expecting logical in Y2455 / R2455C25: got 'Year_lookup!J1:J2'\n\n\nWarning: Expecting logical in X2456 / R2456C24: got 'K'\n\n\nWarning: Expecting logical in Y2456 / R2456C25: got 'Year_lookup!K1:K2'\n\n\nWarning: Expecting logical in X2457 / R2457C24: got 'L'\n\n\nWarning: Expecting logical in Y2457 / R2457C25: got 'Year_lookup!L1:L2'\n\n\nWarning: Expecting logical in X2458 / R2458C24: got 'M'\n\n\nWarning: Expecting logical in Y2458 / R2458C25: got 'Year_lookup!M1:M2'\n\n\nWarning: Expecting logical in X2459 / R2459C24: got 'N'\n\n\nWarning: Expecting logical in Y2459 / R2459C25: got 'Year_lookup!N1:N2'\n\n\nWarning: Expecting logical in X2460 / R2460C24: got 'O'\n\n\nWarning: Expecting logical in Y2460 / R2460C25: got 'Year_lookup!O1:O2'\n\n\nWarning: Expecting logical in X2461 / R2461C24: got 'P'\n\n\nWarning: Expecting logical in Y2461 / R2461C25: got 'Year_lookup!P1:P2'\n\n\nWarning: Expecting numeric in A2466 / R2466C1: got 'Average of all years'\n\n\nWarning: Expecting numeric in E2468 / R2468C5: got 'Correlation with HPI'\n\n\nWarning: Expecting numeric in P2468 / R2468C16: got 'Extra HPLY (above min)'\n\n\nWarning: Expecting numeric in E2469 / R2469C5: got 'Correlation with HPI\n(2015)'\n\n\nNew names:\n• `` -&gt; `...15`\n• `` -&gt; `...22`\n• `` -&gt; `...23`\n• `` -&gt; `...24`\n• `` -&gt; `...25`\n\n# figure out column names for 2 possible sheet layouts\n\nif (\"LifeExp\" %in% names(df)) {\nlife_col    &lt;- \"LifeExp\"                  # All Data\nhpi_col     &lt;- \"HPI\"\ncountry_col &lt;- \"Country\"\nregion_col  &lt;- \"Continent\"\n} else {\nlife_col    &lt;- \"Life Expectancy (years)\"  # 1. All countries\nhpi_col     &lt;- \"HPI\"\ncountry_col &lt;- \"Country\"\nregion_col  &lt;- \"Continent\"\n}\n\nok    &lt;- complete.cases(df[[life_col]], df[[hpi_col]])\nx_le  &lt;- as.numeric(df[[life_col]][ok])   # life expectancy\ny_hpi &lt;- as.numeric(df[[hpi_col]][ok])    # HPI score\ncty   &lt;- df[[country_col]][ok]\nreg   &lt;- df[[region_col]][ok]\n\nlength(x_le); length(y_hpi)\n\n[1] 2135\n\n\n[1] 2135\n\nhead(\ndata.frame(\ncountry = cty,\nlifeexp = x_le,\nhpi     = y_hpi\n),\n6\n)\n\n      country lifeexp      hpi\n1     Vanuatu  70.449 57.86116\n2      Sweden  82.983 55.93532\n3 El Salvador  70.748 54.67388\n4  Costa Rica  77.023 54.13215\n5   Nicaragua  73.837 53.56492\n6     Denmark  81.375 53.04326\n\n\n\npar(las = 1, mar = c(4, 4, 1.5, 1))\nplot(\nx_le, y_hpi,\npch  = 16,\nxlab = \"Life expectancy (years)\",\nylab = \"HPI score\"\n)\n\n\n\n\n\n\n\n\n\nplot(\nx_le, y_hpi,\npch  = 16,\nxlab = \"Life expectancy\",\nylab = \"HPI score\"\n)\n\no &lt;- order(x_le)\nlines(x_le[o], y_hpi[o], col = \"gray80\")"
  }
]